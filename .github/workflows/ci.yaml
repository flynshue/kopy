name: ci

on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'
  push:
    branches:
      - 'main'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versions.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: git fetch --force --tags

      - name: extract versions
        id: versions
        run: |
          VERSION=$(<VERSION)

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "dirty-version=${VERSION}-$(git log --format=%h -1)" >> $GITHUB_OUTPUT
          echo "git-tag=v${VERSION}" >> $GITHUB_OUTPUT

      - name: Check if Tag Exists
        id: check_tag
        run: |
          git ls-remote --exit-code --tags origin '${{ steps.versions.outputs.version }}' && found=true
          if [[ "${found}" == "true" ]]; then
            echo "::error::The ${{ steps.versions.outputs.version }} tag already exists. Please update the version"
            exit 1
          fi

      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run tests
        run: make test

  build:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=sha,enable=true,priority=100,prefix=${{ needs.test.outputs.version }}-,suffix=,format=short

      - name: print metadata
        run: |
          echo "tags: ${{ steps.meta.outputs.tags }}"
          echo "labels: ${{ steps.meta.outputs.labels }}"

      # - name: docker build
      #   run: |
      #     docker build --build-arg=VERSION=${{ needs.test.outputs.version }} -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.test.outputs.version }}  .

      # - name: docker push
      #   if: ${{ !github.event.pull_request.draft }}
      #   run: |
      #     docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.test.outputs.version }}